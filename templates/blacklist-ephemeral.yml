kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: blacklist-ephemeral
message: |-
  The following service(s) have been created in your project:
         Username: ${MYSQL_USER}
         Password: ${MYSQL_PASSWORD}
    Database Name: ${MYSQL_DATABASE}
   Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

metadata:
  annotations:
    description: |-
      TheBlacklist, without persistent storage. For more information about using this template, see https://github.com/gary-crowe/hitlist

      WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
    iconClass: icon-python
    openshift.io/display-name: TheBlackList (Ephemeral)
    openshift.io/documentation-url: https://github.com/gary-crowe/hitlist
    openshift.io/long-description: This template provides a flask application
      with a database created.  The database is not stored on persistent storage,
      so any restart of the service will result in all data being lost.  The database
      name, username, and password are all pre-defined.
    openshift.io/provider-display-name: Go Red Industries (Comrades LTD)
    openshift.io/support-url:  https://github.com/gary-crowe/hitlist
    tags: blacklist,mysql,python
  name: blacklist-ephemeral
objects:
##############################
# Image streams to be created
##############################
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
    labels:
      app: theblacklist
    name: theblacklist
  spec:
    lookupPolicy:
      local: false
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
    creationTimestamp: null
    labels:
      app: mysql
    name: mysql
  spec:
    lookupPolicy:
      local: false
################
# Build configs
################
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: theblacklist
    name: theblacklist
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: theblacklist:latest
    source:
      contextDir: flask-with-oshift
      git:
        uri: https://github.com/gary-crowe/hitlist
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.8-ubi8
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
    labels:
      app: mysql
    name: mysql
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: mysql:latest
    source:
      contextDir: flask-with-oshift
      git:
#     ref: clean
        uri: https://github.com/gary-crowe/hitlist
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: mysql:8.0
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
##############
# Deployments
# ############
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"theblacklist:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"theblacklist\")].image"}]'
    labels:
      app: theblacklist
    name: theblacklist
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: theblacklist
    strategy: {}
    template:
      metadata:
        annotations:
        labels:
          deployment: theblacklist
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_HOST
            value: mysql
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          image: ' '
          name: theblacklist
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"mysql:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"mysql\")].image"}]'
    labels:
      app: mysql
    name: mysql
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: mysql
    template:
      metadata:
        annotations:
        labels:
          deployment: mysql
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_OPERATIONS_PASSWORD
            value: oppass
          - name: MYSQL_OPERATIONS_USER
            value: opuser
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          image: ' '
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
###########
# Services
###########
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: theblacklist
    name: theblacklist
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deployment: theblacklist
#########
# Routes
#########
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: theblacklist
    name: theblacklist
  spec:
    host: theblacklist.apps.ocp.local
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: theblacklist
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      app: mysql
    name: mysql
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      deployment: mysql
  status:
    loadBalancer: {}
############
# Parameters
############
parameters:
- description: Username for MySQL user that will be used for accessing the database.
  displayName: MySQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MySQL connection user.
  displayName: MySQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: MYSQL_DATABASE
  required: true
  value: offenders
- description: Version of MySQL image to be used (8.0, or latest).
  displayName: Version of MySQL Image
  name: MYSQL_VERSION
  required: true
  value: "latest"
